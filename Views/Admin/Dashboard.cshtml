@{
    ViewData["Title"] = "Admin Dashboard";
    Layout = "_AdminLayout";
}

<div class="admin-container">
    <div class="admin-sidebar">
        <div class="sidebar-header">
            <h2>Admin Panel</h2>
        </div>
        <nav class="sidebar-nav">
            <ul>
                <li>
                    <a href="#home" class="nav-link active" data-section="home">
                        <i class="fas fa-home"></i>
                        <span>Home Content</span>
                    </a>
                </li>
                <li>
                    <a href="#videos" class="nav-link" data-section="videos">
                        <i class="fas fa-video"></i>
                        <span>Videos</span>
                    </a>
                </li>
                <li>
                    <a href="#skills" class="nav-link" data-section="skills">
                        <i class="fas fa-code"></i>
                        <span>Skills</span>
                    </a>
                </li>
                <li>
                    <a href="#projects" class="nav-link" data-section="projects">
                        <i class="fas fa-project-diagram"></i>
                        <span>Projects</span>
                    </a>
                </li>
                <li>
                    <a href="#about" class="nav-link" data-section="about">
                        <i class="fas fa-user"></i>
                        <span>About</span>
                    </a>
                </li>
            </ul>
        </nav>
        <div class="sidebar-footer">
            <a href="@Url.Action("Logout", "Admin")" class="btn btn-danger btn-block">
                <i class="fas fa-sign-out-alt"></i>
                <span>Logout</span>
            </a>
        </div>
    </div>

    <div class="admin-content">
        <div class="content-header">
            <h1>Welcome to Admin Dashboard</h1>
            <p class="text-muted" style="color: #9ca3af !important;">Manage your portfolio content and settings</p>
        </div>

        <div id="home" class="content-section active">
            <!-- Hero Section Card -->
            <div class="card mb-4 mt-3" style="margin-bottom: 1.5rem !important;">
                <div class="card-header">
                    <h5 class="mb-0" style="color: #818cf8 !important;">
                        <i class="fas fa-star"></i>
                        Hero
                    </h5>
                </div>
                <div class="card-body">
                    <p class="text-muted" style="color: #9ca3af !important;">Manage the hero content including title, subtitle, and action buttons.</p>
                    <div class="btn-group" role="group">
                        <button class="btn btn-primary" onclick="toggleHeroEdit()" id="editHeroBtn">
                            <i class="fas fa-edit"></i>
                            Edit Hero
                        </button>
                    </div>
                    
                    <!-- Hero Edit Form (Hidden by default) -->
                    <div id="heroEditForm" style="display: none !important; margin-top: 2rem;">
                        <form id="heroForm" asp-action="SaveHeroSection" asp-controller="Admin" method="post">
                            @Html.AntiForgeryToken()
                            
                            <!-- Template Section -->
                            <div class="mb-4">
                                <h5 class="mb-3" style="color: #818cf8 !important;">Template</h5>
                                <div class="card" style="overflow: visible;">
                                    <div class="card-body" style="overflow: visible;">
                                        <div class="mb-3" style="position: relative;">
                                            <label for="templateNickname" class="form-label" style="color: #9ca3af !important;">Nickname</label>
                                            <div class="input-group">
                                                <input type="text" class="form-control" id="templateNickname" placeholder="Enter new nickname or select existing..." style="color: #818cf8 !important; -webkit-text-fill-color: #818cf8 !important;">
                                                <button class="btn btn-outline-secondary" type="button" id="templateDropdownBtn" style="border-color: rgba(129, 140, 248, 0.3) !important; color: #818cf8 !important; padding: 0.375rem 0.5rem !important; min-width: auto !important; display: flex !important; align-items: center !important; justify-content: center !important; background: transparent !important; width: 40px !important; height: 38px !important; line-height: 1 !important;">
                                                    <i class="fas fa-chevron-down" style="margin: 0 !important; padding: 0 !important; display: block !important;"></i>
                                                </button>
                                            </div>
                                            <!-- Dropdown menu inside the card -->
                                            <div id="customDropdownMenu" style="display: none; position: absolute; top: 100%; left: 0; right: 0; background: rgba(0, 0, 10, 0.95); border: 1px solid rgba(129, 140, 248, 0.3); border-top: none; backdrop-filter: blur(10px); z-index: 99999999 !important; border-radius: 0 0 4px 4px; box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3); opacity: 0; transform: translateY(-10px) scale(0.95); transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1); margin-top: -1px;">
                                                <div class="dropdown-item" onclick="clearTemplateSelection()" style="color: #818cf8; background: transparent; padding: 0.5rem 1rem; cursor: pointer; transition: background 0.2s ease;" onmouseenter="this.style.background='rgba(129, 140, 248, 0.1)';" onmouseleave="this.style.background='transparent';">Clear Selection</div>
                                                <div id="templateOptions">
                                                    <!-- Template options will be loaded here -->
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Main Content -->
                            <div class="mb-4">
                                <h5 class="mb-3" style="color: #818cf8 !important;">Main Content</h5>
                                <div class="card" style="overflow: visible;">
                                    <div class="card-body">
                                        
                                        <div class="row">
                                            <div class="col-md-6 mb-3">
                                                <label for="heroTitle" class="form-label" style="color: #9ca3af !important;">Title</label>
                                                <input type="text" class="form-control" id="heroTitle" name="HeaderTitle" maxlength="100" required style="color: #818cf8 !important; -webkit-text-fill-color: #818cf8 !important;">
                                            </div>
                                            <div class="col-md-6 mb-3">
                                                <label for="heroSubtitle" class="form-label" style="color: #9ca3af !important;">Subtitle</label>
                                                <input type="text" class="form-control" id="heroSubtitle" name="HeaderSubtitle" maxlength="500" required style="color: #818cf8 !important; -webkit-text-fill-color: #818cf8 !important;">
                                            </div>
                                        </div>
                                        <div class="mb-3">
                                            <label for="heroDescription" class="form-label" style="color: #9ca3af !important;">Description</label>
                                            <textarea class="form-control" id="heroDescription" name="HeaderDescription" maxlength="1000" rows="3" style="color: #818cf8 !important; -webkit-text-fill-color: #818cf8 !important;"></textarea>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Background -->
                            <div class="mb-4">
                                <h5 class="mb-3" style="color: #818cf8 !important;">Background</h5>
                                <div class="card" style="overflow: visible;">
                                    <div class="card-body">
                                        <!-- Background Type Toggle -->
                                        <div class="mb-3">
                                            <label class="form-label" style="color: #9ca3af !important;">Background Type</label>
                                            <div class="toggle-container">
                                                <span id="imageLabel" class="toggle-label" style="color: #818cf8 !important; font-weight: 500;">Image</span>
                                                <div class="form-check form-switch toggle-wrapper">
                                                    <input class="form-check-input" type="checkbox" id="backgroundTypeToggle" onchange="toggleBackgroundType()">
                                                    <div class="particle-container" id="toggleParticles"></div>
                                                </div>
                                                <span id="videoLabel" class="toggle-label" style="color: #6b7280 !important;">Video</span>
                                            </div>
                                        </div>
                                        
                                        <!-- Image URL Field -->
                                        <div class="mb-3" id="imageUrlField">
                                            <label for="heroBackgroundImage" class="form-label" style="color: #9ca3af !important;">Background Image URL</label>
                                            <input type="text" class="form-control" id="heroBackgroundImage" name="HeaderBackgroundImageUrl" maxlength="500" style="color: #818cf8 !important; -webkit-text-fill-color: #818cf8 !important;">
                                            
                                            <!-- Image Overlay Settings -->
                                            <div class="mt-4 overlay-controls" id="imageOverlayControls">
                                                <div class="overlay-header">
                                                    <div class="overlay-toggle" onclick="toggleImageOverlay()">
                                                        <div class="toggle-circle" id="imageToggleCircle"></div>
                                                        <span class="overlay-label">Image Overlay</span>
                                                    </div>
                                                </div>
                                                <div class="overlay-settings" id="imageOverlaySettings">
                                                    <div class="setting-group">
                                                        <label class="setting-label">Overlay Color</label>
                                                        <div class="color-picker-container">
                                                            <input type="color" id="imageOverlayColor" name="ImageOverlayColor" value="#000000" class="color-picker">
                                                            <div class="color-preview" id="imageColorPreview"></div>
                                                        </div>
                                                    </div>
                                                    <div class="setting-group">
                                                        <label class="setting-label">Opacity</label>
                                                        <div class="custom-slider-container">
                                                            <div class="custom-slider-track">
                                                                <div class="custom-slider-fill" id="imageSliderFill"></div>
                                                                <div class="custom-slider-thumb" id="imageSliderThumb"></div>
                                                            </div>
                                                            <input type="hidden" id="imageOverlayOpacity" name="ImageOverlayOpacity" value="50">
                                                            <div class="slider-value" id="imageSliderValue">50%</div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        
                                        <!-- Video URL Field -->
                                        <div class="mb-3" id="videoUrlField" style="display: none;">
                                            <label for="heroBackgroundVideo" class="form-label" style="color: #9ca3af !important;">Background Video URL</label>
                                            <input type="text" class="form-control" id="heroBackgroundVideo" name="HeaderBackgroundVideoUrl" maxlength="500" style="color: #818cf8 !important; -webkit-text-fill-color: #818cf8 !important;">
                                            
                                            <!-- Video Overlay Settings -->
                                            <div class="mt-4 overlay-controls" id="videoOverlayControls">
                                                <div class="overlay-header">
                                                    <div class="overlay-toggle" onclick="toggleVideoOverlay()">
                                                        <div class="toggle-circle" id="videoToggleCircle"></div>
                                                        <span class="overlay-label">Video Overlay</span>
                                                    </div>
                                                </div>
                                                <div class="overlay-settings" id="videoOverlaySettings">
                                                    <div class="setting-group">
                                                        <label class="setting-label">Overlay Color</label>
                                                        <div class="color-picker-container">
                                                            <input type="color" id="videoOverlayColor" name="VideoOverlayColor" value="#000000" class="color-picker">
                                                            <div class="color-preview" id="videoColorPreview"></div>
                                                        </div>
                                                    </div>
                                                    <div class="setting-group">
                                                        <label class="setting-label">Opacity</label>
                                                        <div class="custom-slider-container">
                                                            <div class="custom-slider-track">
                                                                <div class="custom-slider-fill" id="videoSliderFill"></div>
                                                                <div class="custom-slider-thumb" id="videoSliderThumb"></div>
                                                            </div>
                                                            <input type="hidden" id="videoOverlayOpacity" name="VideoOverlayOpacity" value="50">
                                                            <div class="slider-value" id="videoSliderValue">50%</div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Primary Button -->
                            <div class="mb-4">
                                <h5 class="mb-3" style="color: #818cf8 !important;">Primary Button</h5>
                                <div class="card" style="overflow: visible;">
                                    <div class="card-body">
                                        <div class="mb-3">
                                            <label for="heroPrimaryButtonText" class="form-label" style="color: #9ca3af !important;">Button Text</label>
                                            <input type="text" class="form-control" id="heroPrimaryButtonText" name="HeaderPrimaryButtonText" maxlength="50" style="color: #818cf8 !important; -webkit-text-fill-color: #818cf8 !important;">
                                        </div>
                                        <div class="mb-3">
                                            <label for="heroPrimaryButtonUrl" class="form-label" style="color: #9ca3af !important;">Button URL</label>
                                            <input type="text" class="form-control" id="heroPrimaryButtonUrl" name="HeaderPrimaryButtonUrl" maxlength="200" style="color: #818cf8 !important; -webkit-text-fill-color: #818cf8 !important;">
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Action Buttons -->
                            <div class="d-flex gap-2 justify-content-between">
                                <button type="button" class="btn btn-danger btn-block" onclick="deleteTemplate()">
                                    <i class="fas fa-trash"></i>
                                    Delete Template
                                </button>
                                <div class="d-flex gap-2">
                                    <button type="button" class="btn btn-secondary" onclick="toggleHeroEdit()">
                                        <i class="fas fa-times"></i>
                                        Cancel
                                    </button>
                                    <button type="submit" class="btn btn-primary">
                                        <i class="fas fa-save"></i>
                                        Save Changes
                                    </button>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
            </div>

            <!-- Features List Section Card -->
            <div class="card mb-4" style="margin-bottom: 1.5rem !important;">
                <div class="card-header">
                    <h5 class="mb-0" style="color: #818cf8 !important;">
                        <i class="fas fa-list"></i>
                        Features List Section
                    </h5>
                </div>
                <div class="card-body">
                    <p class="text-muted" style="color: #9ca3af !important;">Manage the Key Skills & Technologies section with its three feature cards.</p>
                    <div class="btn-group" role="group">
                        <button class="btn btn-primary" onclick="toggleFeaturesEdit()" id="editFeaturesBtn">
                            <i class="fas fa-edit"></i>
                            Edit Features
                        </button>
                    </div>
                    
                    <!-- Features Edit Form (Hidden by default) -->
                    <div id="featuresEditForm" style="display: none !important; margin-top: 2rem;">
                        <form id="featuresForm" asp-action="SaveFeaturesSection" asp-controller="Admin" method="post">
                            @Html.AntiForgeryToken()
                            
                            <!-- Template Section -->
                            <div class="mb-4">
                                <h5 class="mb-3" style="color: #818cf8 !important;">Template</h5>
                                <div class="card" style="overflow: visible;">
                                    <div class="card-body" style="overflow: visible;">
                                        <div class="mb-3" style="position: relative;">
                                            <label for="featuresTemplateNickname" class="form-label" style="color: #9ca3af !important;">Nickname</label>
                                            <div class="input-group">
                                                <input type="text" class="form-control" id="featuresTemplateNickname" placeholder="Enter new nickname or select existing..." style="color: #818cf8 !important; -webkit-text-fill-color: #818cf8 !important; background-color: rgba(50, 45, 60, 0.25) !important;">
                                                <button class="btn btn-outline-secondary" type="button" id="featuresTemplateDropdownBtn" style="border-color: rgba(129, 140, 248, 0.3) !important; color: #818cf8 !important; padding: 0.375rem 0.5rem !important; min-width: auto !important; display: flex !important; align-items: center !important; justify-content: center !important; background: transparent !important; width: 40px !important; height: 38px !important; line-height: 1 !important;">
                                                    <i class="fas fa-chevron-down" style="margin: 0 !important; padding: 0 !important; display: block !important;"></i>
                                                </button>
                                            </div>
                                            <!-- Dropdown menu inside the card -->
                                            <div id="featuresCustomDropdownMenu" style="display: none; position: absolute; top: 100%; left: 0; right: 0; background: rgba(0, 0, 10, 0.95); border: 1px solid rgba(129, 140, 248, 0.3); border-top: none; backdrop-filter: blur(10px); z-index: 99999999 !important; border-radius: 0 0 4px 4px; box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3); opacity: 0; transform: translateY(-10px) scale(0.95); transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1); margin-top: -1px;">
                                                <div class="dropdown-item" onclick="clearFeaturesTemplateSelection()" style="color: #818cf8; background: transparent; padding: 0.5rem 1rem; cursor: pointer; transition: background 0.2s ease;" onmouseenter="this.style.background='rgba(129, 140, 248, 0.1)';" onmouseleave="this.style.background='transparent';">Clear Selection</div>
                                                <div id="featuresTemplateOptions">
                                                    <!-- Template options will be loaded here -->
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Section Header -->
                            <div class="mb-4">
                                <h5 class="mb-3" style="color: #818cf8 !important;">Section Header</h5>
                                <div class="card">
                                    <div class="card-body">
                                        <div class="row">
                                            <div class="col-md-6 mb-3">
                                                <label for="featuresTitle" class="form-label" style="color: #9ca3af !important;">Section Title</label>
                                                <input type="text" class="form-control" id="featuresTitle" name="SectionTitle" maxlength="100" required style="color: #818cf8 !important; -webkit-text-fill-color: #818cf8 !important;">
                                            </div>
                                            <div class="col-md-6 mb-3">
                                                <label for="featuresSubtitle" class="form-label" style="color: #9ca3af !important;">Section Subtitle</label>
                                                <input type="text" class="form-control" id="featuresSubtitle" name="SectionSubtitle" maxlength="200" style="color: #818cf8 !important; -webkit-text-fill-color: #818cf8 !important;">
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Feature Cards -->
                            <div class="mb-4">
                                <h5 class="mb-3" style="color: #818cf8 !important;">Feature Cards</h5>
                                
                                <!-- Feature 1 -->
                                <div class="card mb-3">
                                    <div class="card-header">
                                        <h6 class="mb-0" style="color: #818cf8 !important;">Feature 1</h6>
                                    </div>
                                    <div class="card-body">
                                        <div class="row">
                                            <div class="col-md-6 mb-3">
                                                <label for="feature1Title" class="form-label" style="color: #9ca3af !important;">Title</label>
                                                <input type="text" class="form-control" id="feature1Title" name="Feature1Title" maxlength="100" required style="color: #818cf8 !important; -webkit-text-fill-color: #818cf8 !important;">
                                            </div>
                                            <div class="col-md-6 mb-3">
                                                <label for="feature1Subtitle" class="form-label" style="color: #9ca3af !important;">Subtitle</label>
                                                <input type="text" class="form-control" id="feature1Subtitle" name="Feature1Subtitle" maxlength="200" style="color: #818cf8 !important; -webkit-text-fill-color: #818cf8 !important;">
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-6 mb-3">
                                                <label for="feature1Icon" class="form-label" style="color: #9ca3af !important;">Icon</label>
                                                <div class="input-group">
                                                    <input type="text" class="form-control" id="feature1Icon" name="Feature1Icon" maxlength="50" placeholder="fas fa-code" style="color: #818cf8 !important; -webkit-text-fill-color: #818cf8 !important;">
                                                    <button class="btn btn-outline-secondary" type="button" onclick="openIconPicker('feature1Icon')" style="border-color: rgba(129, 140, 248, 0.3) !important; color: #818cf8 !important;">
                                                        <i class="fas fa-icons"></i>
                                                    </button>
                                                </div>
                                                <div id="feature1IconPreview" class="mt-2" style="color: #818cf8 !important; font-size: 1.2rem;"></div>
                                            </div>
                                            <div class="col-md-6 mb-3">
                                                <label for="feature1Link" class="form-label" style="color: #9ca3af !important;">Link</label>
                                                <input type="text" class="form-control" id="feature1Link" name="Feature1Link" maxlength="200" placeholder="/projects?category=frontend" style="color: #818cf8 !important; -webkit-text-fill-color: #818cf8 !important;">
                                            </div>
                                        </div>
                                        <div class="mb-3">
                                            <label for="feature1Description" class="form-label" style="color: #9ca3af !important;">Description</label>
                                            <textarea class="form-control" id="feature1Description" name="Feature1Description" maxlength="500" rows="2" style="color: #818cf8 !important; -webkit-text-fill-color: #818cf8 !important;"></textarea>
                                        </div>
                                    </div>
                                </div>

                                <!-- Feature 2 -->
                                <div class="card mb-3">
                                    <div class="card-header">
                                        <h6 class="mb-0" style="color: #818cf8 !important;">Feature 2</h6>
                                    </div>
                                    <div class="card-body">
                                        <div class="row">
                                            <div class="col-md-6 mb-3">
                                                <label for="feature2Title" class="form-label" style="color: #9ca3af !important;">Title</label>
                                                <input type="text" class="form-control" id="feature2Title" name="Feature2Title" maxlength="100" required style="color: #818cf8 !important; -webkit-text-fill-color: #818cf8 !important;">
                                            </div>
                                            <div class="col-md-6 mb-3">
                                                <label for="feature2Subtitle" class="form-label" style="color: #9ca3af !important;">Subtitle</label>
                                                <input type="text" class="form-control" id="feature2Subtitle" name="Feature2Subtitle" maxlength="200" style="color: #818cf8 !important; -webkit-text-fill-color: #818cf8 !important;">
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-6 mb-3">
                                                <label for="feature2Icon" class="form-label" style="color: #9ca3af !important;">Icon</label>
                                                <div class="input-group">
                                                    <input type="text" class="form-control" id="feature2Icon" name="Feature2Icon" maxlength="50" placeholder="fas fa-server" style="color: #818cf8 !important; -webkit-text-fill-color: #818cf8 !important;">
                                                    <button class="btn btn-outline-secondary" type="button" onclick="openIconPicker('feature2Icon')" style="border-color: rgba(129, 140, 248, 0.3) !important; color: #818cf8 !important;">
                                                        <i class="fas fa-icons"></i>
                                                    </button>
                                                </div>
                                                <div id="feature2IconPreview" class="mt-2" style="color: #818cf8 !important; font-size: 1.2rem;"></div>
                                            </div>
                                            <div class="col-md-6 mb-3">
                                                <label for="feature2Link" class="form-label" style="color: #9ca3af !important;">Link</label>
                                                <input type="text" class="form-control" id="feature2Link" name="Feature2Link" maxlength="200" placeholder="/projects?category=backend" style="color: #818cf8 !important; -webkit-text-fill-color: #818cf8 !important;">
                                            </div>
                                        </div>
                                        <div class="mb-3">
                                            <label for="feature2Description" class="form-label" style="color: #9ca3af !important;">Description</label>
                                            <textarea class="form-control" id="feature2Description" name="Feature2Description" maxlength="500" rows="2" style="color: #818cf8 !important; -webkit-text-fill-color: #818cf8 !important;"></textarea>
                                        </div>
                                    </div>
                                </div>

                                <!-- Feature 3 -->
                                <div class="card mb-3">
                                    <div class="card-header">
                                        <h6 class="mb-0" style="color: #818cf8 !important;">Feature 3</h6>
                                    </div>
                                    <div class="card-body">
                                        <div class="row">
                                            <div class="col-md-6 mb-3">
                                                <label for="feature3Title" class="form-label" style="color: #9ca3af !important;">Title</label>
                                                <input type="text" class="form-control" id="feature3Title" name="Feature3Title" maxlength="100" required style="color: #818cf8 !important; -webkit-text-fill-color: #818cf8 !important;">
                                            </div>
                                            <div class="col-md-6 mb-3">
                                                <label for="feature3Subtitle" class="form-label" style="color: #9ca3af !important;">Subtitle</label>
                                                <input type="text" class="form-control" id="feature3Subtitle" name="Feature3Subtitle" maxlength="200" style="color: #818cf8 !important; -webkit-text-fill-color: #818cf8 !important;">
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-6 mb-3">
                                                <label for="feature3Icon" class="form-label" style="color: #9ca3af !important;">Icon</label>
                                                <div class="input-group">
                                                    <input type="text" class="form-control" id="feature3Icon" name="Feature3Icon" maxlength="50" placeholder="fas fa-palette" style="color: #818cf8 !important; -webkit-text-fill-color: #818cf8 !important;">
                                                    <button class="btn btn-outline-secondary" type="button" onclick="openIconPicker('feature3Icon')" style="border-color: rgba(129, 140, 248, 0.3) !important; color: #818cf8 !important;">
                                                        <i class="fas fa-icons"></i>
                                                    </button>
                                                </div>
                                                <div id="feature3IconPreview" class="mt-2" style="color: #818cf8 !important; font-size: 1.2rem;"></div>
                                            </div>
                                            <div class="col-md-6 mb-3">
                                                <label for="feature3Link" class="form-label" style="color: #9ca3af !important;">Link</label>
                                                <input type="text" class="form-control" id="feature3Link" name="Feature3Link" maxlength="200" placeholder="/projects?category=design" style="color: #818cf8 !important; -webkit-text-fill-color: #818cf8 !important;">
                                            </div>
                                        </div>
                                        <div class="mb-3">
                                            <label for="feature3Description" class="form-label" style="color: #9ca3af !important;">Description</label>
                                            <textarea class="form-control" id="feature3Description" name="Feature3Description" maxlength="500" rows="2" style="color: #818cf8 !important; -webkit-text-fill-color: #818cf8 !important;"></textarea>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Action Buttons -->
                            <div class="d-flex gap-2 justify-content-between">
                                <button type="button" class="btn btn-danger btn-block" onclick="deleteFeaturesTemplate()" id="deleteFeaturesBtn" style="display: none;">
                                    <i class="fas fa-trash"></i>
                                    Delete Template
                                </button>
                                <div class="d-flex gap-2">
                                    <button type="button" class="btn btn-secondary" onclick="toggleFeaturesEdit()">
                                        <i class="fas fa-times"></i>
                                        Cancel
                                    </button>
                                    <button type="submit" class="btn btn-primary">
                                        <i class="fas fa-save"></i>
                                        Save Changes
                                    </button>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
            </div>

            <!-- CTA Section Card -->
            <div class="card mb-4" style="margin-bottom: 1.5rem !important;">
                <div class="card-header">
                    <h5 class="mb-0" style="color: #818cf8 !important;">
                        <i class="fas fa-bullhorn"></i>
                        Call to Action Section
                    </h5>
                </div>
                <div class="card-body">
                    <p class="text-muted" style="color: #9ca3af !important;">Manage the CTA section content including title and subtitle.</p>
                    <button class="btn btn-primary" onclick="editSection('cta')">
                        <i class="fas fa-edit"></i>
                        Edit CTA Section
                    </button>
                </div>
            </div>

            <!-- Footer Section Card -->
            <div class="card mb-4" style="margin-bottom: 1.5rem !important;">
                <div class="card-header">
                    <h5 class="mb-0" style="color: #818cf8 !important;">
                        <i class="fas fa-shoe-prints"></i>
                        Footer Section
                    </h5>
                </div>
                <div class="card-body">
                    <p class="text-muted" style="color: #9ca3af !important;">Manage the footer content and links.</p>
                    <button class="btn btn-primary" onclick="editSection('footer')">
                        <i class="fas fa-edit"></i>
                        Edit Footer
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>



@section Scripts {
    <script>
        // Navigation handling
        document.querySelectorAll('.nav-link').forEach(link => {
            link.addEventListener('click', (e) => {
                e.preventDefault();
                const navLink = e.target.closest('.nav-link');
                
                if (!navLink) return; // Guard against null
                
                const section = navLink.dataset.section;
                
                // Update active states
                document.querySelectorAll('.nav-link').forEach(l => l.classList.remove('active'));
                document.querySelectorAll('.content-section').forEach(s => s.classList.remove('active'));
                
                navLink.classList.add('active');
                
                const targetSection = document.getElementById(section);
                if (targetSection) {
                    targetSection.classList.add('active');
                }
            });
        });

        // Toggle hero edit form
        function toggleHeroEdit() {
            const form = document.getElementById('heroEditForm');
            const editButton = document.querySelector('.btn-primary[onclick="toggleHeroEdit()"]');
            
            console.log('toggleHeroEdit called');
            console.log('Form display before:', form.style.display);
            console.log('Form computed display:', window.getComputedStyle(form).display);
            console.log('Form element:', form);
            console.log('Edit button:', editButton);
            
            if (form.style.display === 'none' || form.style.display === '') {
                // Show form, hide edit button
                editButton.style.opacity = '0';
                editButton.style.transform = 'translateY(-10px)';
                
                setTimeout(() => {
                    editButton.style.display = 'none';
                    form.style.display = 'block';
                    form.style.opacity = '0';
                    form.style.transform = 'translateY(10px)';
                    
                    setTimeout(() => {
                        form.style.opacity = '1';
                        form.style.transform = 'translateY(0)';
                    }, 50);
                }, 200);
            } else {
                // Hide form, show edit button
                form.style.opacity = '0';
                form.style.transform = 'translateY(-10px)';
                
                setTimeout(() => {
                    form.style.display = 'none';
                    editButton.style.display = 'inline-flex';
                    editButton.style.opacity = '0';
                    editButton.style.transform = 'translateY(10px)';
                    
                    setTimeout(() => {
                        editButton.style.opacity = '1';
                        editButton.style.transform = 'translateY(0)';
                    }, 50);
                }, 200);
            }
        }

        // Handle hero form submission
        document.getElementById('heroForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            // Show loading state
            const submitBtn = e.target.querySelector('button[type="submit"]');
            const originalText = submitBtn.innerHTML;
            submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Saving...';
            submitBtn.disabled = true;
            
            let response = null;
            
            try {
                // Use the form's natural submission to the correct backend route
                const formData = new FormData(e.target);
                
                response = await fetch(e.target.action, {
                    method: 'POST',
                    body: formData
                });
                
                // Check if response is OK before trying to parse JSON
                if (!response.ok) {
                    const errorText = await response.text();
                    console.error('HTTP Error:', response.status, errorText);
                    throw new Error(`HTTP ${response.status}: ${errorText.substring(0, 200)}`);
                }
                
                const result = await response.json();
                
                if (result.success) {
                    showHeroSuccessPopup();
                    toggleHeroEdit();
                    
                    // The backend will automatically broadcast the WebSocket message
                    console.log('Hero section saved successfully, WebSocket broadcast sent');
                } else {
                    console.error('Server error:', result);
                    alert(`Failed to update hero section: ${result.message}\n\nDetails: ${result.details || 'No additional details'}`);
                }
            } catch (error) {
                console.error('Error:', error);
                
                // Try to get response text for debugging if we have a response
                if (response) {
                    try {
                        const responseText = await response.text();
                        console.error('Response text:', responseText);
                        alert(`An error occurred while updating the hero section.\n\nError: ${error.message}\n\nResponse: ${responseText.substring(0, 200)}...`);
                    } catch (textError) {
                        alert(`An error occurred while updating the hero section.\n\nError: ${error.message}`);
                    }
                } else {
                    alert(`An error occurred while updating the hero section.\n\nError: ${error.message}`);
                }
            } finally {
                // Restore button state
                submitBtn.innerHTML = originalText;
                submitBtn.disabled = false;
            }
        });

        // Content management functions
        function addHomeContent() {
            // TODO: Implement add home content
        }

        function addVideo() {
            // TODO: Implement add video
        }

        function addSkill() {
            // TODO: Implement add skill
        }

        function addProject() {
            // TODO: Implement add project
        }

        function editAbout() {
            // TODO: Implement edit about
        }

        function editSection(sectionId) {
            // TODO: Implement section editing functionality
            console.log(`Editing section: ${sectionId}`);
        }

        function editFeature(featureId) {
            // TODO: Implement feature editing functionality
            console.log(`Editing feature: ${featureId}`);
        }

        // Toggle features edit form
        function toggleFeaturesEdit() {
            const form = document.getElementById('featuresEditForm');
            const editButton = document.getElementById('editFeaturesBtn');
            
            console.log('toggleFeaturesEdit called');
            console.log('Form display before:', form.style.display);
            console.log('Form element:', form);
            console.log('Edit button:', editButton);
            
            if (form.style.display === 'none' || form.style.display === '') {
                // Show form, hide edit button
                editButton.style.opacity = '0';
                editButton.style.transform = 'translateY(-10px)';
                
                setTimeout(() => {
                    editButton.style.display = 'none';
                    form.style.display = 'block';
                    form.style.opacity = '0';
                    form.style.transform = 'translateY(10px)';
                    
                    setTimeout(() => {
                        form.style.opacity = '1';
                        form.style.transform = 'translateY(0)';
                    }, 50);
                }, 200);
                
                // Load current features data
                loadFeaturesData();
            } else {
                // Hide form, show edit button
                form.style.opacity = '0';
                form.style.transform = 'translateY(-10px)';
                
                setTimeout(() => {
                    form.style.display = 'none';
                    editButton.style.display = 'inline-flex';
                    editButton.style.opacity = '0';
                    editButton.style.transform = 'translateY(10px)';
                    
                    setTimeout(() => {
                        editButton.style.opacity = '1';
                        editButton.style.transform = 'translateY(0)';
                    }, 50);
                }, 200);
            }
        }

        // Load features data from API
        async function loadFeaturesData() {
            try {
                console.log('Loading features data...');
                
                const response = await fetch('/Admin/GetFeaturesSection');
                
                console.log('Features response status:', response.status);
                
                if (!response.ok) {
                    const errorText = await response.text();
                    console.error('HTTP Error loading features:', response.status, errorText);
                    throw new Error(`HTTP ${response.status}: ${errorText.substring(0, 200)}`);
                }
                
                const result = await response.json();
                
                if (result.success) {
                    const features = result.data;
                    console.log('Loaded features:', features);
                    
                    // Fill form fields with null checks
                    const featuresTitleEl = document.getElementById('featuresTitle');
                    const featuresSubtitleEl = document.getElementById('featuresSubtitle');
                    const feature1TitleEl = document.getElementById('feature1Title');
                    const feature1SubtitleEl = document.getElementById('feature1Subtitle');
                    const feature1IconEl = document.getElementById('feature1Icon');
                    const feature1LinkEl = document.getElementById('feature1Link');
                    const feature1DescriptionEl = document.getElementById('feature1Description');
                    const feature2TitleEl = document.getElementById('feature2Title');
                    const feature2SubtitleEl = document.getElementById('feature2Subtitle');
                    const feature2IconEl = document.getElementById('feature2Icon');
                    const feature2LinkEl = document.getElementById('feature2Link');
                    const feature2DescriptionEl = document.getElementById('feature2Description');
                    const feature3TitleEl = document.getElementById('feature3Title');
                    const feature3SubtitleEl = document.getElementById('feature3Subtitle');
                    const feature3IconEl = document.getElementById('feature3Icon');
                    const feature3LinkEl = document.getElementById('feature3Link');
                    const feature3DescriptionEl = document.getElementById('feature3Description');
                    
                    if (featuresTitleEl) featuresTitleEl.value = features.sectionTitle || '';
                    if (featuresSubtitleEl) featuresSubtitleEl.value = features.sectionSubtitle || '';
                    
                    if (feature1TitleEl) feature1TitleEl.value = features.feature1Title || '';
                    if (feature1SubtitleEl) feature1SubtitleEl.value = features.feature1Subtitle || '';
                    if (feature1IconEl) feature1IconEl.value = features.feature1Icon || '';
                    if (feature1LinkEl) feature1LinkEl.value = features.feature1Link || '';
                    if (feature1DescriptionEl) feature1DescriptionEl.value = features.feature1Description || '';
                    
                    if (feature2TitleEl) feature2TitleEl.value = features.feature2Title || '';
                    if (feature2SubtitleEl) feature2SubtitleEl.value = features.feature2Subtitle || '';
                    if (feature2IconEl) feature2IconEl.value = features.feature2Icon || '';
                    if (feature2LinkEl) feature2LinkEl.value = features.feature2Link || '';
                    if (feature2DescriptionEl) feature2DescriptionEl.value = features.feature2Description || '';
                    
                    if (feature3TitleEl) feature3TitleEl.value = features.feature3Title || '';
                    if (feature3SubtitleEl) feature3SubtitleEl.value = features.feature3Subtitle || '';
                    if (feature3IconEl) feature3IconEl.value = features.feature3Icon || '';
                    if (feature3LinkEl) feature3LinkEl.value = features.feature3Link || '';
                    if (feature3DescriptionEl) feature3DescriptionEl.value = features.feature3Description || '';
                    
                    // Update icon previews
                    updateAllIconPreviews();
                    
                    console.log('Features form populated successfully');
                } else {
                    console.error('Error loading features:', result.message);
                    showNotification('Error!', result.message, 'error');
                }
            } catch (error) {
                console.error('Error loading features:', error);
                console.error('Error details:', error.message);
                console.error('Error stack:', error.stack);
                showNotification('Error!', `An unexpected error occurred: ${error.message}`, 'error');
            }
        }

        // Toggle background type
        function toggleBackgroundType() {
            const imageUrlField = document.getElementById('imageUrlField');
            const videoUrlField = document.getElementById('videoUrlField');
            const imageLabel = document.getElementById('imageLabel');
            const videoLabel = document.getElementById('videoLabel');
            const toggle = document.getElementById('backgroundTypeToggle');
            
            // Create particle animation
            createToggleParticles();
            
            if (toggle.checked) {
                // Video selected
                imageUrlField.style.display = 'none';
                videoUrlField.style.display = 'block';
                imageLabel.style.color = '#6b7280';
                imageLabel.style.fontWeight = '400';
                videoLabel.style.color = '#818cf8';
                videoLabel.style.fontWeight = '500';
            } else {
                // Image selected
                imageUrlField.style.display = 'block';
                videoUrlField.style.display = 'none';
                imageLabel.style.color = '#818cf8';
                imageLabel.style.fontWeight = '500';
                videoLabel.style.color = '#6b7280';
                videoLabel.style.fontWeight = '400';
            }
        }

        // Create particle animation
        function createToggleParticles() {
            const particleContainer = document.getElementById('toggleParticles');
            const toggle = document.getElementById('backgroundTypeToggle');
            const numParticles = 8;
            
            // Clear existing particles
            particleContainer.innerHTML = '';
            
            // Calculate the position of the rounded square
            const toggleRect = toggle.getBoundingClientRect();
            const containerRect = particleContainer.getBoundingClientRect();
            
            // The rounded square is positioned based on the toggle state
            const squareOffset = toggle.checked ? toggleRect.width - 12 : 6; // Approximate position of the square
            const squareX = squareOffset - (containerRect.width / 2);
            const squareY = (toggleRect.height / 2) - (containerRect.height / 2);
            
            for (let i = 0; i < numParticles; i++) {
                const particle = document.createElement('div');
                particle.className = 'particle';
                
                // Position particle at the rounded square location
                particle.style.left = '50%';
                particle.style.top = '50%';
                particle.style.transform = 'translate(-50%, -50%)';
                
                // Random direction and distance from the square
                const angle = (i / numParticles) * 2 * Math.PI;
                const distance = 15 + Math.random() * 10;
                const x = Math.cos(angle) * distance;
                const y = Math.sin(angle) * distance;
                
                particle.style.setProperty('--x', x + 'px');
                particle.style.setProperty('--y', y + 'px');
                
                // Random delay for staggered effect
                particle.style.animationDelay = (Math.random() * 0.2) + 's';
                
                particleContainer.appendChild(particle);
            }
            
            // Clean up particles after animation
            setTimeout(() => {
                particleContainer.innerHTML = '';
            }, 1000);
        }

        // Toggle image overlay settings
        function toggleImageOverlay() {
            const overlayControls = document.getElementById('imageOverlayControls');
            const toggleCircle = document.getElementById('imageToggleCircle');
            const isExpanded = overlayControls.classList.contains('expanded');
            
            if (isExpanded) {
                overlayControls.classList.remove('expanded');
                toggleCircle.classList.remove('active');
            } else {
                overlayControls.classList.add('expanded');
                toggleCircle.classList.add('active');
            }
        }

        // Toggle video overlay settings
        function toggleVideoOverlay() {
            const overlayControls = document.getElementById('videoOverlayControls');
            const toggleCircle = document.getElementById('videoToggleCircle');
            const isExpanded = overlayControls.classList.contains('expanded');
            
            if (isExpanded) {
                overlayControls.classList.remove('expanded');
                toggleCircle.classList.remove('active');
            } else {
                overlayControls.classList.add('expanded');
                toggleCircle.classList.add('active');
            }
        }

        // Update color preview with opacity
        function updateColorPreview(colorPicker, previewElement, sliderElement) {
            const color = colorPicker.value;
            const opacity = sliderElement.value / 100;
            
            // Convert hex to rgba
            const r = parseInt(color.substr(1, 2), 16);
            const g = parseInt(color.substr(3, 2), 16);
            const b = parseInt(color.substr(5, 2), 16);
            
            previewElement.style.backgroundColor = `rgba(${r}, ${g}, ${b}, ${opacity})`;
        }

        // Update slider fill and value
        function updateSliderFill(slider, valueElement) {
            const percentage = slider.value;
            valueElement.textContent = percentage + '%';
            
            // Update the glowing bar width
            slider.style.setProperty('--glow-width', percentage + '%');
        }

        // Initialize elegant controls
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize color pickers
            initializeColorPickers();
            
            // Initialize custom sliders
            initializeCustomSliders();
            
            // Initialize form submission
            initializeFormSubmission();
        });

        // Initialize color pickers
        function initializeColorPickers() {
            const imageColorPicker = document.getElementById('imageOverlayColor');
            const videoColorPicker = document.getElementById('videoOverlayColor');
            const imageColorPreview = document.getElementById('imageColorPreview');
            const videoColorPreview = document.getElementById('videoColorPreview');
            const imageSlider = document.getElementById('imageOverlayOpacity');
            const videoSlider = document.getElementById('videoOverlayOpacity');

            // Set initial colors with opacity
            updateColorPreview(imageColorPicker, imageColorPreview, imageSlider);
            updateColorPreview(videoColorPicker, videoColorPreview, videoSlider);

            // Add event listeners for color changes
            imageColorPicker.addEventListener('input', function() {
                updateColorPreview(this, imageColorPreview, imageSlider);
            });

            videoColorPicker.addEventListener('input', function() {
                updateColorPreview(this, videoColorPreview, videoSlider);
            });
        }

        // Initialize custom sliders
        function initializeCustomSliders() {
            initializeCustomSlider('imageSliderThumb', 'imageSliderFill', 'imageOverlayOpacity', 'imageSliderValue', 50);
            initializeCustomSlider('videoSliderThumb', 'videoSliderFill', 'videoOverlayOpacity', 'videoSliderValue', 50);
        }

        // Initialize a single custom slider
        function initializeCustomSlider(thumbId, fillId, hiddenInputId, valueId, initialValue) {
            const thumb = document.getElementById(thumbId);
            const fill = document.getElementById(fillId);
            const hiddenInput = document.getElementById(hiddenInputId);
            const valueDisplay = document.getElementById(valueId);
            const track = thumb.parentElement;

            let isDragging = false;
            let currentValue = initialValue;

            // Set initial position
            updateSliderPosition(currentValue);

            // Mouse events
            thumb.addEventListener('mousedown', startDragging);
            track.addEventListener('mousedown', handleTrackClick);
            document.addEventListener('mousemove', handleMouseMove);
            document.addEventListener('mouseup', stopDragging);

            // Touch events for mobile
            thumb.addEventListener('touchstart', startDragging);
            track.addEventListener('touchstart', handleTrackClick);
            document.addEventListener('touchmove', handleTouchMove);
            document.addEventListener('touchend', stopDragging);

            function startDragging(e) {
                e.preventDefault();
                isDragging = true;
                thumb.style.cursor = 'grabbing';
            }

            function stopDragging() {
                isDragging = false;
                thumb.style.cursor = 'grab';
            }

            function handleMouseMove(e) {
                if (!isDragging) return;
                updateSliderFromEvent(e);
            }

            function handleTouchMove(e) {
                if (!isDragging) return;
                e.preventDefault();
                const touch = e.touches[0];
                updateSliderFromEvent(touch);
            }

            function handleTrackClick(e) {
                updateSliderFromEvent(e);
            }

            function updateSliderFromEvent(e) {
                const rect = track.getBoundingClientRect();
                const x = e.clientX - rect.left;
                const percentage = Math.max(0, Math.min(100, (x / rect.width) * 100));
                updateSliderPosition(percentage);
            }

            function updateSliderPosition(percentage) {
                currentValue = Math.round(percentage);
                
                // Update thumb position
                thumb.style.left = percentage + '%';
                
                // Update fill width
                fill.style.width = percentage + '%';
                
                // Update hidden input value
                hiddenInput.value = currentValue;
                
                // Update display value
                valueDisplay.textContent = currentValue + '%';
                
                // Update color preview if applicable
                updateColorPreviewFromSlider(hiddenInputId);
            }

            function updateColorPreviewFromSlider(sliderId) {
                if (sliderId === 'imageOverlayOpacity') {
                    const colorPicker = document.getElementById('imageOverlayColor');
                    const preview = document.getElementById('imageColorPreview');
                    if (colorPicker && preview) {
                        updateColorPreview(colorPicker, preview, { value: currentValue });
                    }
                } else if (sliderId === 'videoOverlayOpacity') {
                    const colorPicker = document.getElementById('videoOverlayColor');
                    const preview = document.getElementById('videoColorPreview');
                    if (colorPicker && preview) {
                        updateColorPreview(colorPicker, preview, { value: currentValue });
                    }
                }
            }
        }

        // Initialize form submission
        function initializeFormSubmission() {
            const heroForm = document.getElementById('heroForm');
            const featuresForm = document.getElementById('featuresForm');
            
            heroForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                
                // Show loading state
                const submitButton = heroForm.querySelector('button[type="submit"]');
                const originalText = submitButton.innerHTML;
                submitButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Saving...';
                submitButton.disabled = true;
                
                try {
                    const nickname = document.getElementById('templateNickname').value.trim();
                    let templateResult = null;
                    
                    // Step 1: Handle template saving/updating
                    if (nickname) {
                        templateResult = await handleTemplateSave(nickname);
                        if (!templateResult.success) {
                            showNotification('Error!', templateResult.message, 'error');
                            return;
                        }
                    }
                    
                    // Step 2: Save to frontend
                    const formData = new FormData(heroForm);
                    
                    const response = await fetch('/Admin/SaveHeroSection', {
                        method: 'POST',
                        body: formData,
                        headers: {
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                        }
                    });
                    
                    // Debug: Log response details
                    console.log('Response status:', response.status);
                    console.log('Response headers:', response.headers);
                    
                    if (!response.ok) {
                        const errorText = await response.text();
                        console.error('Response error text:', errorText);
                        throw new Error(`HTTP ${response.status}: ${errorText}`);
                    }
                    
                    const result = await response.json();
                    
                    if (result.success) {
                        // Show success message
                        const message = nickname && templateResult ? 
                            `Template "${nickname}" ${templateResult.updated ? 'updated' : 'saved'} and hero section updated successfully!` :
                            'Hero section updated successfully!';
                        showNotification('Success!', message, 'success');
                        
                        // Hide the form
                        toggleHeroEdit();
                        
                        // Reload templates to reflect changes
                        await loadTemplates();
                        
                        // Frontend will automatically detect changes within 3 seconds via WebSocket
                        console.log('Changes saved successfully - frontend will update automatically via WebSocket');
                    } else {
                        // Show error message
                        showNotification('Error!', result.message, 'error');
                    }
                } catch (error) {
                    console.error('Error saving:', error);
                    console.error('Error details:', error.message);
                    console.error('Error stack:', error.stack);
                    showNotification('Error!', `An unexpected error occurred: ${error.message}`, 'error');
                } finally {
                    // Restore button state
                    submitButton.innerHTML = originalText;
                    submitButton.disabled = false;
                }
            });

            // Features form submission - exactly like Hero section
            featuresForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                
                // Show loading state
                const submitButton = featuresForm.querySelector('button[type="submit"]');
                const originalText = submitButton.innerHTML;
                submitButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Saving...';
                submitButton.disabled = true;
                
                try {
                    // Get nickname from template field
                    const nickname = document.getElementById('featuresTemplateNickname').value.trim();
                    
                    if (!nickname) {
                        showNotification('Error!', 'Please enter a nickname for the template.', 'error');
                        return;
                    }
                    
                    // Handle template saving/updating like Hero section
                    const result = await handleFeaturesTemplateSave(nickname);
                    
                    if (result.success) {
                        // Show success message
                        showNotification('Success!', result.message, 'success');
                        
                        // Hide the form
                        toggleFeaturesEdit();
                        
                        // Reload templates
                        await loadFeaturesTemplates();
                        
                        // Frontend will automatically detect changes via WebSocket
                        console.log('Features template saved successfully - frontend will update automatically via WebSocket');
                    } else {
                        // Show error message
                        showNotification('Error!', result.message, 'error');
                    }
                } catch (error) {
                    console.error('Error saving features template:', error);
                    console.error('Error details:', error.message);
                    console.error('Error stack:', error.stack);
                    showNotification('Error!', `An unexpected error occurred: ${error.message}`, 'error');
                } finally {
                    // Restore button state
                    submitButton.innerHTML = originalText;
                    submitButton.disabled = false;
                }
            });
        }

        // Handle template saving/updating
        async function handleTemplateSave(nickname) {
            try {
                // Check if template already exists
                const existingTemplate = currentTemplates.find(t => t.nickname.toLowerCase() === nickname.toLowerCase());
                
                if (existingTemplate) {
                    // Update existing template
                    const formData = new FormData();
                    formData.append('Id', existingTemplate.id);
                    formData.append('Nickname', nickname);
                    formData.append('HeaderTitle', document.getElementById('heroTitle').value || '');
                    formData.append('HeaderSubtitle', document.getElementById('heroSubtitle').value || '');
                    formData.append('HeaderDescription', document.getElementById('heroDescription').value || '');
                    formData.append('HeaderBackgroundImageUrl', document.getElementById('heroBackgroundImage').value || '');
                    formData.append('HeaderBackgroundVideoUrl', document.getElementById('heroBackgroundVideo').value || '');
                    formData.append('HeaderPrimaryButtonText', document.getElementById('heroPrimaryButtonText').value || '');
                    formData.append('HeaderPrimaryButtonUrl', document.getElementById('heroPrimaryButtonUrl').value || '');
                    formData.append('ImageOverlayColor', document.getElementById('imageOverlayColor').value || '#000000');
                    formData.append('ImageOverlayOpacity', document.getElementById('imageOverlayOpacity').value || '50');
                    formData.append('VideoOverlayColor', document.getElementById('videoOverlayColor').value || '#000000');
                    formData.append('VideoOverlayOpacity', document.getElementById('videoOverlayOpacity').value || '50');
                    formData.append('__RequestVerificationToken', document.querySelector('input[name="__RequestVerificationToken"]').value);
                    
                    const response = await fetch('/Admin/UpdateHeroTemplate', {
                        method: 'POST',
                        body: formData
                    });
                    
                    // Debug: Log response details
                    console.log('Update template response status:', response.status);
                    
                    if (!response.ok) {
                        const errorText = await response.text();
                        console.error('Update template error text:', errorText);
                        throw new Error(`HTTP ${response.status}: ${errorText}`);
                    }
                    
                    const result = await response.json();
                    
                    if (result.success) {
                        return { success: true, updated: true, message: result.message };
                    } else {
                        return { success: false, message: result.message };
                    }
                } else {
                    // Create new template
                    const formData = new FormData();
                    formData.append('Nickname', nickname);
                    formData.append('HeaderTitle', document.getElementById('heroTitle').value || '');
                    formData.append('HeaderSubtitle', document.getElementById('heroSubtitle').value || '');
                    formData.append('HeaderDescription', document.getElementById('heroDescription').value || '');
                    formData.append('HeaderBackgroundImageUrl', document.getElementById('heroBackgroundImage').value || '');
                    formData.append('HeaderBackgroundVideoUrl', document.getElementById('heroBackgroundVideo').value || '');
                    formData.append('HeaderPrimaryButtonText', document.getElementById('heroPrimaryButtonText').value || '');
                    formData.append('HeaderPrimaryButtonUrl', document.getElementById('heroPrimaryButtonUrl').value || '');
                    formData.append('ImageOverlayColor', document.getElementById('imageOverlayColor').value || '#000000');
                    formData.append('ImageOverlayOpacity', document.getElementById('imageOverlayOpacity').value || '50');
                    formData.append('VideoOverlayColor', document.getElementById('videoOverlayColor').value || '#000000');
                    formData.append('VideoOverlayOpacity', document.getElementById('videoOverlayOpacity').value || '50');
                    formData.append('__RequestVerificationToken', document.querySelector('input[name="__RequestVerificationToken"]').value);
                    
                    const response = await fetch('/Admin/SaveHeroTemplate', {
                        method: 'POST',
                        body: formData
                    });
                    
                    // Debug: Log response details
                    console.log('Save template response status:', response.status);
                    
                    if (!response.ok) {
                        const errorText = await response.text();
                        console.error('Save template error text:', errorText);
                        throw new Error(`HTTP ${response.status}: ${errorText}`);
                    }
                    
                    const result = await response.json();
                    
                    if (result.success) {
                        return { success: true, updated: false, message: result.message };
                    } else {
                        return { success: false, message: result.message };
                    }
                }
            } catch (error) {
                console.error('Error handling template save:', error);
                return { success: false, message: 'An unexpected error occurred while saving template.' };
            }
        }

        // Handle Features template saving/updating - exactly like Hero section
        async function handleFeaturesTemplateSave(nickname) {
            try {
                // Check if template already exists
                const existingTemplate = featuresTemplates.find(t => t.nickname.toLowerCase() === nickname.toLowerCase());
                
                if (existingTemplate) {
                    // Update existing template
                    const formData = new FormData();
                    formData.append('Id', existingTemplate.id);
                    formData.append('Nickname', nickname);
                    formData.append('SectionTitle', document.getElementById('featuresTitle').value || '');
                    formData.append('SectionSubtitle', document.getElementById('featuresSubtitle').value || '');
                    formData.append('Feature1Title', document.getElementById('feature1Title').value || '');
                    formData.append('Feature1Subtitle', document.getElementById('feature1Subtitle').value || '');
                    formData.append('Feature1Description', document.getElementById('feature1Description').value || '');
                    formData.append('Feature1Icon', document.getElementById('feature1Icon').value || '');
                    formData.append('Feature1Link', document.getElementById('feature1Link').value || '');
                    formData.append('Feature2Title', document.getElementById('feature2Title').value || '');
                    formData.append('Feature2Subtitle', document.getElementById('feature2Subtitle').value || '');
                    formData.append('Feature2Description', document.getElementById('feature2Description').value || '');
                    formData.append('Feature2Icon', document.getElementById('feature2Icon').value || '');
                    formData.append('Feature2Link', document.getElementById('feature2Link').value || '');
                    formData.append('Feature3Title', document.getElementById('feature3Title').value || '');
                    formData.append('Feature3Subtitle', document.getElementById('feature3Subtitle').value || '');
                    formData.append('Feature3Description', document.getElementById('feature3Description').value || '');
                    formData.append('Feature3Icon', document.getElementById('feature3Icon').value || '');
                    formData.append('Feature3Link', document.getElementById('feature3Link').value || '');
                    formData.append('__RequestVerificationToken', document.querySelector('input[name="__RequestVerificationToken"]').value);
                    
                    const response = await fetch('/Admin/SaveFeaturesTemplate', {
                        method: 'POST',
                        body: formData
                    });
                    
                    // Debug: Log response details
                    console.log('Update features template response status:', response.status);
                    
                    if (!response.ok) {
                        const errorText = await response.text();
                        console.error('Update features template error text:', errorText);
                        throw new Error(`HTTP ${response.status}: ${errorText}`);
                    }
                    
                    const result = await response.json();
                    
                    if (result.success) {
                        return { success: true, updated: true, message: result.message };
                    } else {
                        return { success: false, message: result.message };
                    }
                } else {
                    // Create new template
                    const formData = new FormData();
                    formData.append('Nickname', nickname);
                    formData.append('SectionTitle', document.getElementById('featuresTitle').value || '');
                    formData.append('SectionSubtitle', document.getElementById('featuresSubtitle').value || '');
                    formData.append('Feature1Title', document.getElementById('feature1Title').value || '');
                    formData.append('Feature1Subtitle', document.getElementById('feature1Subtitle').value || '');
                    formData.append('Feature1Description', document.getElementById('feature1Description').value || '');
                    formData.append('Feature1Icon', document.getElementById('feature1Icon').value || '');
                    formData.append('Feature1Link', document.getElementById('feature1Link').value || '');
                    formData.append('Feature2Title', document.getElementById('feature2Title').value || '');
                    formData.append('Feature2Subtitle', document.getElementById('feature2Subtitle').value || '');
                    formData.append('Feature2Description', document.getElementById('feature2Description').value || '');
                    formData.append('Feature2Icon', document.getElementById('feature2Icon').value || '');
                    formData.append('Feature2Link', document.getElementById('feature2Link').value || '');
                    formData.append('Feature3Title', document.getElementById('feature3Title').value || '');
                    formData.append('Feature3Subtitle', document.getElementById('feature3Subtitle').value || '');
                    formData.append('Feature3Description', document.getElementById('feature3Description').value || '');
                    formData.append('Feature3Icon', document.getElementById('feature3Icon').value || '');
                    formData.append('Feature3Link', document.getElementById('feature3Link').value || '');
                    formData.append('__RequestVerificationToken', document.querySelector('input[name="__RequestVerificationToken"]').value);
                    
                    const response = await fetch('/Admin/SaveFeaturesTemplate', {
                        method: 'POST',
                        body: formData
                    });
                    
                    // Debug: Log response details
                    console.log('Save features template response status:', response.status);
                    
                    if (!response.ok) {
                        const errorText = await response.text();
                        console.error('Save features template error text:', errorText);
                        throw new Error(`HTTP ${response.status}: ${errorText}`);
                    }
                    
                    const result = await response.json();
                    
                    if (result.success) {
                        return { success: true, updated: false, message: result.message };
                    } else {
                        return { success: false, message: result.message };
                    }
                }
            } catch (error) {
                console.error('Error handling features template save:', error);
                return { success: false, message: 'An unexpected error occurred while saving features template.' };
            }
        }

        // Show notification
        function showNotification(title, message, type) {
            if (type === 'success') {
                showHeroSuccessPopup(title, message);
            } else {
                // Create error notification element
                const notification = document.createElement('div');
                notification.className = `alert alert-danger alert-dismissible fade show position-fixed`;
                notification.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
                notification.innerHTML = `
                    <strong>${title}</strong> ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                `;
                
                // Add to page
                document.body.appendChild(notification);
                
                // Auto remove after 5 seconds
                setTimeout(() => {
                    if (notification.parentNode) {
                        notification.remove();
                    }
                }, 5000);
            }
        }

        // Show hero success popup
        function showHeroSuccessPopup(title, message) {
            // Create overlay
            const overlay = document.createElement('div');
            overlay.className = 'hero-success-overlay';
            overlay.style.cssText = `
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: rgba(5, 5, 16, 0.9);
                backdrop-filter: blur(10px);
                z-index: 9999;
                display: flex;
                align-items: center;
                justify-content: center;
                animation: fadeIn 0.3s ease-out;
            `;

            // Create popup card
            const popup = document.createElement('div');
            popup.className = 'hero-success-popup';
            popup.style.cssText = `
                background: linear-gradient(135deg, rgba(0, 0, 10, 0.7), rgba(5, 5, 25, 0.5));
                border: 1px solid rgba(187, 195, 255, 0.1);
                border-radius: 12px;
                padding: 2rem;
                text-align: center;
                max-width: 400px;
                width: 90%;
                box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
                animation: slideIn 0.4s ease-out;
            `;

            // Create content
            popup.innerHTML = `
                <div class="success-icon" style="
                    width: 60px;
                    height: 60px;
                    background: linear-gradient(135deg, #818cf8, #6366f1);
                    border-radius: 50%;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    margin: 0 auto 1.5rem;
                    animation: pulse 2s infinite;
                ">
                    <i class="fas fa-check" style="color: white; font-size: 1.5rem;"></i>
                </div>
                <h3 style="color: #818cf8; margin-bottom: 1rem; font-weight: 500;">${title}</h3>
                <p style="color: #a5b4fc; margin-bottom: 2rem; line-height: 1.6;">${message}</p>
                <button class="btn btn-primary" onclick="closeHeroSuccessPopup()" style="
                    background: linear-gradient(135deg, #818cf8, #6366f1);
                    border: none;
                    padding: 0.75rem 2rem;
                    border-radius: 8px;
                    color: white;
                    font-weight: 500;
                    transition: all 0.3s ease;
                    box-shadow: 0 4px 15px rgba(129, 140, 248, 0.3);
                " onmouseover="this.style.transform='translateY(-2px)'; this.style.boxShadow='0 6px 20px rgba(129, 140, 248, 0.4)'" onmouseout="this.style.transform='translateY(0)'; this.style.boxShadow='0 4px 15px rgba(129, 140, 248, 0.3)'">
                    <i class="fas fa-arrow-right"></i>
                    Continue
                </button>
            `;

            // Add styles for animations
            const style = document.createElement('style');
            style.textContent = `
                @@keyframes fadeIn {
                    from { opacity: 0; }
                    to { opacity: 1; }
                }
                @@keyframes slideIn {
                    from { 
                        opacity: 0; 
                        transform: translateY(-30px) scale(0.9); 
                    }
                    to { 
                        opacity: 1; 
                        transform: translateY(0) scale(1); 
                    }
                }
                @@keyframes pulse {
                    0%, 100% { 
                        transform: scale(1); 
                        box-shadow: 0 0 0 0 rgba(129, 140, 248, 0.7); 
                    }
                    50% { 
                        transform: scale(1.05); 
                        box-shadow: 0 0 0 10px rgba(129, 140, 248, 0); 
                    }
                }
            `;
            document.head.appendChild(style);

            // Add to page
            overlay.appendChild(popup);
            document.body.appendChild(overlay);

            // Add close function to global scope
            window.closeHeroSuccessPopup = function() {
                overlay.style.animation = 'fadeOut 0.3s ease-out';
                setTimeout(() => {
                    if (overlay.parentNode) {
                        overlay.remove();
                    }
                    if (style.parentNode) {
                        style.remove();
                    }
                }, 300);
            };

            // Add fadeOut animation
            const fadeOutStyle = document.createElement('style');
            fadeOutStyle.textContent = `
                @@keyframes fadeOut {
                    from { opacity: 1; }
                    to { opacity: 0; }
                }
            `;
            document.head.appendChild(fadeOutStyle);
        }

        // Hero Template Management Functions
        let currentTemplates = [];

        // Load templates on page load
        document.addEventListener('DOMContentLoaded', function() {
            console.log('DOMContentLoaded - checking form state');
            const form = document.getElementById('heroEditForm');
            console.log('Form display on load:', form.style.display);
            console.log('Form computed display on load:', window.getComputedStyle(form).display);
            
            loadTemplates();
        });

        // Load all templates
        async function loadTemplates() {
            try {
                console.log('Loading templates...');
                
                // Server handles authentication - no need to check cookies client-side
                console.log('Loading templates - server will handle authentication...');
                
                const response = await fetch('/Admin/GetHeroTemplates');
                
                console.log('Template response status:', response.status);
                console.log('Template response headers:', response.headers);
                
                // Check if response is OK before trying to parse JSON
                if (!response.ok) {
                    const errorText = await response.text();
                    console.error('HTTP Error loading templates:', response.status, errorText);
                    console.error('Response headers:', Object.fromEntries(response.headers.entries()));
                    
                    // Check if it's an authentication redirect
                    if (response.status === 302 || response.status === 401) {
                        console.error('Authentication error - user may not be logged in');
                        throw new Error('Authentication required. Please log in again.');
                    }
                    
                    throw new Error(`HTTP ${response.status}: ${errorText.substring(0, 200)}`);
                }
                
                // Get response text first to debug
                const responseText = await response.text();
                console.log('Template response text:', responseText);
                
                // Try to parse JSON
                let result;
                try {
                    result = JSON.parse(responseText);
                } catch (jsonError) {
                    console.error('JSON parsing error:', jsonError);
                    console.error('Response text that failed to parse:', responseText);
                    throw new Error(`JSON parsing failed: ${jsonError.message}`);
                }
                
                console.log('Templates response:', result);
                
                if (result.success) {
                    currentTemplates = result.data;
                    console.log('Loaded templates:', currentTemplates);
                    updateTemplateDropdown();
                    setupCustomDropdown();
                } else {
                    console.error('Error loading templates:', result.message);
                }
            } catch (error) {
                console.error('Error loading templates:', error);
                console.error('Error details:', error.message);
                console.error('Error stack:', error.stack);
                // Don't show alert for template loading errors as they're not critical
            }
        }
        
        // Close dropdown with smooth animation
        function closeDropdownSmoothly() {
            const dropdownMenu = document.getElementById('customDropdownMenu');
            const card = dropdownMenu.closest('.card');
            const inputField = document.getElementById('templateNickname');
            dropdownMenu.style.opacity = '0';
            dropdownMenu.style.transform = 'translateY(-10px) scale(0.95)';
            card.classList.remove('expanded-for-dropdown');
            
            // Remove unified glow and restore original styles
            const inputGroup = inputField.closest('.input-group');
            inputGroup.style.boxShadow = '';
            inputGroup.style.borderRadius = '';
            // Restore input field styling
            inputField.style.borderColor = '';
            inputField.style.outline = '';
            
            // Restore dropdown button radius and border
            const dropdownBtn = document.getElementById('templateDropdownBtn');
            dropdownBtn.style.borderBottomRightRadius = '';
            dropdownBtn.style.borderRight = '';
            
            setTimeout(() => {
                dropdownMenu.style.display = 'none';
            }, 300);
        }
        
        // Setup custom dropdown
        function setupCustomDropdown() {
            const dropdownBtn = document.getElementById('templateDropdownBtn');
            const dropdownMenu = document.getElementById('customDropdownMenu');
            
            console.log('Setting up custom dropdown');
            console.log('Button:', dropdownBtn);
            console.log('Menu:', dropdownMenu);
            
            let isOpen = false;
            
            dropdownBtn.addEventListener('click', function(e) {
                console.log('Button clicked!');
                e.preventDefault();
                e.stopPropagation();
                
                if (isOpen) {
                    console.log('Closing dropdown');
                    closeDropdownSmoothly();
                    isOpen = false;
                } else {
                    console.log('Opening dropdown');
                    const card = dropdownMenu.closest('.card');
                    const inputField = document.getElementById('templateNickname');
                    const dropdownBtn = document.getElementById('templateDropdownBtn');
                    // Reset to initial state first
                    dropdownMenu.style.opacity = '0';
                    dropdownMenu.style.transform = 'translateY(-10px) scale(0.95)';
                    
                    // Show dropdown and expand card
                    dropdownMenu.style.display = 'block';
                    card.classList.add('expanded-for-dropdown');
                    
                    // Remove individual glows from input and button
                    inputField.style.boxShadow = 'none';
                    dropdownBtn.style.boxShadow = 'none';
                    // Remove input field focus border
                    inputField.style.borderColor = 'rgba(129, 140, 248, 0.3)';
                    inputField.style.outline = 'none';
                    
                    // Apply glow to input group (top, left, right only)
                    const inputGroup = inputField.closest('.input-group');
                    inputGroup.style.setProperty(
                      'box-shadow',
                      '-4px 0 8px -4px rgba(129,140,248,0.25), 4px 0 8px -4px rgba(129,140,248,0.25), 0 -4px 8px -4px rgba(129,140,248,0.25)',
                      'important'
                    );
                    inputGroup.style.borderRadius = '4px 4px 0 0';
                    // Remove bottom right radius from dropdown button and adjust border
                    dropdownBtn.style.borderBottomRightRadius = '0';
                    dropdownBtn.style.borderRight = '1px solid rgba(129, 140, 248, 0.3)';
                    
                    // Apply glow to dropdown (bottom, left, right only)
                    dropdownMenu.style.setProperty(
                      'box-shadow',
                      '0 4px 8px -4px rgba(129,140,248,0.25), -4px 0 8px -4px rgba(129,140,248,0.25), 4px 0 8px -4px rgba(129,140,248,0.25)',
                      'important'
                    );
                    dropdownMenu.style.border = '1px solid rgba(129, 140, 248, 0.3)';
                    dropdownMenu.style.borderTop = 'none';
                    dropdownMenu.style.borderRadius = '0 0 4px 4px';
                    // Fix 1-pixel alignment with button
                    dropdownMenu.style.right = '1px';
                    
                    // Force reflow to ensure display: block is applied
                    dropdownMenu.offsetHeight;
                    
                    // Smooth open animation
                    requestAnimationFrame(() => {
                        dropdownMenu.style.opacity = '1';
                        dropdownMenu.style.transform = 'translateY(0) scale(1)';
                    });
                    isOpen = true;
                }
            });
            
            // Close dropdown when clicking outside
            document.addEventListener('click', function(e) {
                if (!dropdownBtn.contains(e.target) && !dropdownMenu.contains(e.target) && isOpen) {
                    closeDropdownSmoothly();
                    isOpen = false;
                }
            });
            
            // Close dropdown when pressing Escape
            document.addEventListener('keydown', function(e) {
                if (e.key === 'Escape' && isOpen) {
                    closeDropdownSmoothly();
                    isOpen = false;
                }
            });
        }

        // Update template dropdown
        function updateTemplateDropdown() {
            console.log('Updating template dropdown with templates:', currentTemplates);
            const templateOptions = document.getElementById('templateOptions');
            console.log('Template options element:', templateOptions);
            templateOptions.innerHTML = '';
            
            currentTemplates.forEach((template, idx) => {
                console.log('Creating option for template:', template);
                const option = document.createElement('div');
                option.className = 'dropdown-item';
                option.style.cssText = 'color: #818cf8; background: transparent; padding: 0.5rem 1rem; cursor: pointer; transition: background 0.2s ease; border-top: 1px solid rgba(129, 140, 248, 0.2);';
                option.textContent = `${template.nickname} (${template.title})`;
                option.onclick = function(e) {
                    e.preventDefault();
                    selectTemplate(template.id, template.nickname);
                    // Close dropdown after selection with smooth animation
                    closeDropdownSmoothly();
                };
                
                // Add hover effect
                option.onmouseenter = function() {
                    this.style.background = 'rgba(129, 140, 248, 0.1)';
                };
                option.onmouseleave = function() {
                    this.style.background = 'transparent';
                };
                
                templateOptions.appendChild(option);
            });
            console.log('Template dropdown updated');
        }

        // Select template from dropdown
        async function selectTemplate(templateId, templateNickname) {
            // Update the input field with the selected nickname
            document.getElementById('templateNickname').value = templateNickname;
            
            // Load the template data
            await loadTemplateById(templateId);
        }

        // Clear template selection
        function clearTemplateSelection() {
            document.getElementById('templateNickname').value = '';
            // Close dropdown after clearing with smooth animation
            closeDropdownSmoothly();
        }

        // Load template by ID
        async function loadTemplateById(templateId) {
            try {
                const response = await fetch(`/Admin/GetHeroTemplate?id=${templateId}`);
                
                // Check if response is OK before trying to parse JSON
                if (!response.ok) {
                    const errorText = await response.text();
                    console.error('HTTP Error loading template:', response.status, errorText);
                    throw new Error(`HTTP ${response.status}: ${errorText.substring(0, 200)}`);
                }
                
                // Get response text first to debug
                const responseText = await response.text();
                console.log('Template response text:', responseText);
                
                // Try to parse JSON
                let result;
                try {
                    result = JSON.parse(responseText);
                } catch (jsonError) {
                    console.error('JSON parsing error:', jsonError);
                    console.error('Response text that failed to parse:', responseText);
                    throw new Error(`JSON parsing failed: ${jsonError.message}`);
                }
                
                if (result.success) {
                    const template = result.data;
                    
                    // Fill nickname field with template name
                    document.getElementById('templateNickname').value = template.nickname || '';
                    
                    // Fill form fields
                    document.getElementById('heroTitle').value = template.title || '';
                    document.getElementById('heroSubtitle').value = template.subtitle || '';
                    document.getElementById('heroDescription').value = template.description || '';
                    document.getElementById('heroBackgroundImage').value = template.backgroundImageUrl || '';
                    document.getElementById('heroBackgroundVideo').value = template.backgroundVideoUrl || '';
                    document.getElementById('heroPrimaryButtonText').value = template.primaryButtonText || '';
                    document.getElementById('heroPrimaryButtonUrl').value = template.primaryButtonUrl || '';
                    document.getElementById('imageOverlayColor').value = template.overlayColor || '#000000';
                    document.getElementById('imageOverlayOpacity').value = Math.round(template.overlayOpacity * 100) || 50;
                    document.getElementById('videoOverlayColor').value = template.overlayColor || '#000000';
                    document.getElementById('videoOverlayOpacity').value = Math.round(template.overlayOpacity * 100) || 50;
                    
                    // Update sliders and previews
                    updateSliderFill(document.getElementById('imageOverlayOpacity'), document.getElementById('imageSliderValue'));
                    updateSliderFill(document.getElementById('videoOverlayOpacity'), document.getElementById('videoSliderValue'));
                    
                    // Update color previews
                    const imageColorPicker = document.getElementById('imageOverlayColor');
                    const videoColorPicker = document.getElementById('videoOverlayColor');
                    const imageColorPreview = document.getElementById('imageColorPreview');
                    const videoColorPreview = document.getElementById('videoColorPreview');
                    
                    if (imageColorPicker && imageColorPreview) {
                        updateColorPreview(imageColorPicker, imageColorPreview, document.getElementById('imageOverlayOpacity'));
                    }
                    if (videoColorPicker && videoColorPreview) {
                        updateColorPreview(videoColorPicker, videoColorPreview, document.getElementById('videoOverlayOpacity'));
                    }
                    
                    // Don't automatically show the form - let user click Edit button
                    
                    showNotification('Success!', `Template "${template.nickname}" loaded successfully!`, 'success');
                } else {
                    showNotification('Error!', result.message, 'error');
                }
            } catch (error) {
                console.error('Error loading template:', error);
                showNotification('Error!', 'An unexpected error occurred.', 'error');
            }
        }

        // Delete template from dropdown
        async function deleteTemplate() {
            const nickname = document.getElementById('templateNickname').value.trim();
            
            if (!nickname) {
                showNotification('Error!', 'Please enter or select a template nickname to delete.', 'error');
                return;
            }
            
            // Find template by nickname
            const template = currentTemplates.find(t => t.nickname.toLowerCase() === nickname.toLowerCase());
            
            if (!template) {
                showNotification('Error!', 'Template not found. Please select an existing template.', 'error');
                return;
            }
            
            await deleteTemplateById(template.id);
        }

        // Delete template by ID
        async function deleteTemplateById(templateId) {
            const template = currentTemplates.find(t => t.id == templateId);
            
            if (!template) {
                showNotification('Error!', 'Template not found.', 'error');
                return;
            }
            
            if (!confirm(`Are you sure you want to delete the template "${template.nickname}"?`)) {
                return;
            }
            
            try {
                const formData = new FormData();
                formData.append('id', templateId);
                formData.append('__RequestVerificationToken', document.querySelector('input[name="__RequestVerificationToken"]').value);
                
                const response = await fetch('/Admin/DeleteHeroTemplate', {
                    method: 'POST',
                    body: formData
                });
                
                const result = await response.json();
                
                if (result.success) {
                    showNotification('Success!', result.message, 'success');
                    await loadTemplates();
                } else {
                    showNotification('Error!', result.message, 'error');
                }
            } catch (error) {
                console.error('Error deleting template:', error);
                showNotification('Error!', 'An unexpected error occurred.', 'error');
            }
        }

        // WebSocket connection for real-time updates
        let ws = null;
        let wsReconnectAttempts = 0;
        const maxReconnectAttempts = 3;
        
        function connectWebSocket() {
            // Don't try to reconnect if we've exceeded max attempts
            if (wsReconnectAttempts >= maxReconnectAttempts) {
                console.log('WebSocket: Max reconnection attempts reached, stopping reconnection');
                return;
            }
            
            const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
            const wsUrl = `${protocol}//${window.location.host}/ws/portfolio`;
            
            try {
                ws = new WebSocket(wsUrl);
                
                ws.onopen = () => {
                    console.log('Admin WebSocket connected');
                    wsReconnectAttempts = 0; // Reset counter on successful connection
                };
                
                ws.onmessage = (event) => {
                    try {
                        const data = JSON.parse(event.data);
                        if (data.type === 'heroDataUpdated') {
                            console.log('Hero data updated via WebSocket');
                            // Could show a notification or update UI
                        }
                    } catch (error) {
                        console.error('WebSocket: Error parsing message:', error);
                    }
                };
                
                ws.onerror = (error) => {
                    console.error('WebSocket error:', error);
                    
                    // Azure App Service WebSocket diagnostics
                    console.log('🔍 Azure WebSocket Diagnostics:');
                    console.log('  - Error Type:', error.type);
                    console.log('  - Error Target:', error.target);
                    console.log('  - Ready State:', ws.readyState);
                    console.log('  - URL:', ws.url);
                    console.log('  - Protocol:', ws.protocol);
                    console.log('  - Extensions:', ws.extensions);
                    
                    // Check if it's an Azure App Service limitation
                    if (ws.readyState === WebSocket.CLOSED) {
                        console.log('⚠️  This might be an Azure App Service WebSocket limitation');
                        console.log('💡 Try upgrading to Premium plan for better WebSocket support');
                    }
                };
                
                ws.onclose = (event) => {
                    console.log('WebSocket connection closed');
                    console.log('Close code:', event.code);
                    console.log('Close reason:', event.reason);
                    wsReconnectAttempts++;
                    
                    // Azure App Service close code analysis
                    console.log('🔍 Azure WebSocket Close Analysis:');
                    console.log('  - Close Code:', event.code);
                    console.log('  - Close Reason:', event.reason);
                    console.log('  - Was Clean:', event.wasClean);
                    
                    // Interpret close codes
                    switch(event.code) {
                        case 1000:
                            console.log('✅ Normal closure - WebSocket closed properly');
                            break;
                        case 1001:
                            console.log('⚠️  Going away - Server or client is shutting down');
                            break;
                        case 1002:
                            console.log('❌ Protocol error - Invalid WebSocket protocol');
                            break;
                        case 1003:
                            console.log('❌ Unsupported data - Received unsupported data type');
                            break;
                        case 1006:
                            console.log('❌ Abnormal closure - Connection lost without close frame');
                            console.log('⚠️  This often indicates Azure App Service WebSocket limitations');
                            break;
                        case 1011:
                            console.log('❌ Server error - Server encountered an error');
                            break;
                        case 1015:
                            console.log('❌ TLS handshake failed - SSL/TLS negotiation failed');
                            break;
                        default:
                            console.log('❓ Unknown close code:', event.code);
                    }
                    
                    // Only reconnect if we haven't exceeded max attempts
                    if (wsReconnectAttempts < maxReconnectAttempts) {
                        console.log(`WebSocket: Attempting reconnection ${wsReconnectAttempts}/${maxReconnectAttempts}`);
                        setTimeout(connectWebSocket, 5000);
                    } else {
                        console.log('WebSocket: Max reconnection attempts reached');
                        console.log('💡 Consider upgrading to Premium App Service plan for better WebSocket support');
                        
                        // Final diagnostic summary
                        console.log('📊 Final WebSocket Diagnostic Summary:');
                        console.log('  - Total Attempts:', wsReconnectAttempts);
                        console.log('  - Last Close Code:', event.code);
                        console.log('  - Last Close Reason:', event.reason);
                        console.log('  - Recommendation: Upgrade to Azure App Service Premium plan');
                    }
                };
            } catch (error) {
                console.error('WebSocket: Error creating connection:', error);
                wsReconnectAttempts++;
                
                if (wsReconnectAttempts < maxReconnectAttempts) {
                    setTimeout(connectWebSocket, 5000);
                }
            }
        }
        
        // Icon picker functionality
        let currentIconField = null;
        
        // Common FontAwesome icons for features
        const commonIcons = [
            { class: 'fas fa-code', name: 'Code' },
            { class: 'fas fa-server', name: 'Server' },
            { class: 'fas fa-palette', name: 'Design' },
            { class: 'fas fa-mobile-alt', name: 'Mobile' },
            { class: 'fas fa-database', name: 'Database' },
            { class: 'fas fa-cloud', name: 'Cloud' },
            { class: 'fas fa-shield-alt', name: 'Security' },
            { class: 'fas fa-rocket', name: 'Performance' },
            { class: 'fas fa-users', name: 'Team' },
            { class: 'fas fa-lightbulb', name: 'Innovation' },
            { class: 'fas fa-cogs', name: 'Tools' },
            { class: 'fas fa-chart-line', name: 'Analytics' },
            { class: 'fas fa-laptop-code', name: 'Development' },
            { class: 'fas fa-paint-brush', name: 'Creative' },
            { class: 'fas fa-network-wired', name: 'Networking' }
        ];
        
        function openIconPicker(fieldId) {
            currentIconField = fieldId;
            
            // Create modal if it doesn't exist
            if (!document.getElementById('iconPickerModal')) {
                createIconPickerModal();
            }
            
            // Show modal
            document.getElementById('iconPickerModal').style.display = 'block';
        }
        
        function createIconPickerModal() {
            const modal = document.createElement('div');
            modal.id = 'iconPickerModal';
            modal.style.cssText = `
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: rgba(0, 0, 0, 0.8);
                z-index: 999999;
                display: none;
                backdrop-filter: blur(5px);
            `;
            
            const modalContent = document.createElement('div');
            modalContent.style.cssText = `
                position: absolute;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                background: rgba(0, 0, 10, 0.95);
                border: 1px solid rgba(129, 140, 248, 0.3);
                border-radius: 8px;
                padding: 2rem;
                max-width: 600px;
                width: 90%;
                max-height: 80vh;
                overflow-y: auto;
                backdrop-filter: blur(10px);
            `;
            
            modalContent.innerHTML = `
                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1.5rem;">
                    <h4 style="color: #818cf8; margin: 0;">Select Icon</h4>
                    <button onclick="closeIconPicker()" style="background: none; border: none; color: #9ca3af; font-size: 1.5rem; cursor: pointer;">&times;</button>
                </div>
                <div style="margin-bottom: 1rem;">
                    <input type="text" id="iconSearch" placeholder="Search icons..." style="width: 100%; padding: 0.5rem; border: 1px solid rgba(129, 140, 248, 0.3); border-radius: 4px; background: rgba(0, 0, 0, 0.5); color: #818cf8;">
                </div>
                <div id="iconGrid" style="display: grid; grid-template-columns: repeat(auto-fill, minmax(120px, 1fr)); gap: 1rem;">
                    ${commonIcons.map(icon => `
                        <div class="icon-option" onclick="selectIcon('${icon.class}')" style="
                            display: flex;
                            flex-direction: column;
                            align-items: center;
                            padding: 1rem;
                            border: 1px solid rgba(129, 140, 248, 0.2);
                            border-radius: 6px;
                            cursor: pointer;
                            transition: all 0.2s ease;
                            background: rgba(0, 0, 0, 0.3);
                        " onmouseenter="this.style.borderColor='rgba(129, 140, 248, 0.6)'; this.style.background='rgba(129, 140, 248, 0.1)'" 
                           onmouseleave="this.style.borderColor='rgba(129, 140, 248, 0.2)'; this.style.background='rgba(0, 0, 0, 0.3)'">
                            <i class="${icon.class}" style="font-size: 2rem; color: #818cf8; margin-bottom: 0.5rem;"></i>
                            <span style="color: #9ca3af; font-size: 0.8rem; text-align: center;">${icon.name}</span>
                        </div>
                    `).join('')}
                </div>
                <div style="margin-top: 1.5rem; text-align: center;">
                    <button onclick="closeIconPicker()" style="
                        background: rgba(129, 140, 248, 0.2);
                        border: 1px solid rgba(129, 140, 248, 0.3);
                        color: #818cf8;
                        padding: 0.5rem 1rem;
                        border-radius: 4px;
                        cursor: pointer;
                    ">Cancel</button>
                </div>
            `;
            
            modal.appendChild(modalContent);
            document.body.appendChild(modal);
            
            // Add search functionality
            document.getElementById('iconSearch').addEventListener('input', function(e) {
                const searchTerm = e.target.value.toLowerCase();
                const iconOptions = document.querySelectorAll('.icon-option');
                
                iconOptions.forEach(option => {
                    const iconName = option.querySelector('span').textContent.toLowerCase();
                    const iconClass = option.querySelector('i').className.toLowerCase();
                    
                    if (iconName.includes(searchTerm) || iconClass.includes(searchTerm)) {
                        option.style.display = 'flex';
                    } else {
                        option.style.display = 'none';
                    }
                });
            });
            
            // Close modal when clicking outside
            modal.addEventListener('click', function(e) {
                if (e.target === modal) {
                    closeIconPicker();
                }
            });
        }
        
        function selectIcon(iconClass) {
            if (currentIconField) {
                document.getElementById(currentIconField).value = iconClass;
                updateIconPreview(currentIconField, iconClass);
                closeIconPicker();
            }
        }
        
        function closeIconPicker() {
            const modal = document.getElementById('iconPickerModal');
            if (modal) {
                modal.style.display = 'none';
            }
            currentIconField = null;
        }
        
        function updateIconPreview(fieldId, iconClass) {
            const preview = document.getElementById(fieldId + 'Preview');
            if (preview && iconClass) {
                preview.innerHTML = `<i class="${iconClass}"></i>`;
            }
        }
        
        // Update icon previews when form loads
        function updateAllIconPreviews() {
            ['feature1Icon', 'feature2Icon', 'feature3Icon'].forEach(fieldId => {
                const field = document.getElementById(fieldId);
                if (field && field.value) {
                    updateIconPreview(fieldId, field.value);
                }
            });
        }
        
        // Features template functionality
        let featuresTemplates = [];
        let selectedFeaturesTemplateId = null;

        async function loadFeaturesTemplates() {
            try {
                console.log('Loading features templates...');
                const response = await fetch('/Admin/GetFeaturesTemplates');
                console.log('Features templates response status:', response.status);
                
                if (!response.ok) {
                    const errorText = await response.text();
                    console.error('Features templates error response:', errorText);
                    throw new Error(`HTTP ${response.status}: ${errorText}`);
                }
                
                const result = await response.json();
                console.log('Features templates result:', result);
                
                if (result.success) {
                    featuresTemplates = result.data || [];
                    console.log('Loaded features templates:', featuresTemplates);
                    updateFeaturesTemplateDropdown();
                } else {
                    console.error('Failed to load features templates:', result.message);
                }
            } catch (error) {
                console.error('Error loading features templates:', error);
                console.error('Error details:', error.message);
                console.error('Error stack:', error.stack);
            }
        }

        function updateFeaturesTemplateDropdown() {
            console.log('Updating features template dropdown with templates:', featuresTemplates);
            const templateOptions = document.getElementById('featuresTemplateOptions');
            console.log('Features template options element:', templateOptions);
            templateOptions.innerHTML = '';
            
            featuresTemplates.forEach((template, idx) => {
                console.log('Creating option for features template:', template);
                const option = document.createElement('div');
                option.className = 'dropdown-item';
                option.style.cssText = 'color: #818cf8; background: transparent; padding: 0.5rem 1rem; cursor: pointer; transition: background 0.2s ease; border-top: 1px solid rgba(129, 140, 248, 0.2);';
                option.textContent = `${template.nickname} (${template.sectionTitle})`;
                option.onclick = function(e) {
                    e.preventDefault();
                    selectFeaturesTemplate(template.id, template.nickname);
                    // Close dropdown after selection with smooth animation
                    closeFeaturesDropdownSmoothly();
                };
                
                // Add hover effect
                option.onmouseenter = function() {
                    this.style.background = 'rgba(129, 140, 248, 0.1)';
                };
                option.onmouseleave = function() {
                    this.style.background = 'transparent';
                };
                
                templateOptions.appendChild(option);
            });
            console.log('Features template dropdown updated');
        }

        // Select features template from dropdown
        async function selectFeaturesTemplate(templateId, templateNickname) {
            // Update the input field with the selected nickname
            document.getElementById('featuresTemplateNickname').value = templateNickname;
            
            // Load the template data
            await loadFeaturesTemplateById(templateId);
        }

        // Load features template by ID
        async function loadFeaturesTemplateById(templateId) {
            try {
                const response = await fetch(`/Admin/GetFeaturesTemplate?id=${templateId}`);
                
                // Check if response is OK before trying to parse JSON
                if (!response.ok) {
                    const errorText = await response.text();
                    console.error('HTTP Error loading features template:', response.status, errorText);
                    throw new Error(`HTTP ${response.status}: ${errorText.substring(0, 200)}`);
                }
                
                // Get response text first to debug
                const responseText = await response.text();
                console.log('Features template response text:', responseText);
                
                // Try to parse JSON
                let result;
                try {
                    result = JSON.parse(responseText);
                } catch (jsonError) {
                    console.error('JSON parsing error:', jsonError);
                    console.error('Response text that failed to parse:', responseText);
                    throw new Error(`JSON parsing failed: ${jsonError.message}`);
                }
                
                if (result.success) {
                    const template = result.data;
                    
                    // Set selected template ID
                    selectedFeaturesTemplateId = templateId;
                    
                    // Fill form fields
                    document.getElementById('featuresTitle').value = template.sectionTitle || '';
                    document.getElementById('featuresSubtitle').value = template.sectionSubtitle || '';
                    document.getElementById('feature1Title').value = template.feature1Title || '';
                    document.getElementById('feature1Subtitle').value = template.feature1Subtitle || '';
                    document.getElementById('feature1Description').value = template.feature1Description || '';
                    document.getElementById('feature1Icon').value = template.feature1Icon || '';
                    document.getElementById('feature1Link').value = template.feature1Link || '';
                    document.getElementById('feature2Title').value = template.feature2Title || '';
                    document.getElementById('feature2Subtitle').value = template.feature2Subtitle || '';
                    document.getElementById('feature2Description').value = template.feature2Description || '';
                    document.getElementById('feature2Icon').value = template.feature2Icon || '';
                    document.getElementById('feature2Link').value = template.feature2Link || '';
                    document.getElementById('feature3Title').value = template.feature3Title || '';
                    document.getElementById('feature3Subtitle').value = template.feature3Subtitle || '';
                    document.getElementById('feature3Description').value = template.feature3Description || '';
                    document.getElementById('feature3Icon').value = template.feature3Icon || '';
                    document.getElementById('feature3Link').value = template.feature3Link || '';
                    
                    // Update icon previews
                    updateIconPreview('feature1Icon', template.feature1Icon);
                    updateIconPreview('feature2Icon', template.feature2Icon);
                    updateIconPreview('feature3Icon', template.feature3Icon);
                    
                    // Show delete button for existing templates
                    const deleteBtn = document.getElementById('deleteFeaturesBtn');
                    if (deleteBtn) {
                        deleteBtn.style.display = 'inline-flex';
                        console.log('Delete button shown for template ID:', templateId);
                    } else {
                        console.error('Delete button element not found');
                    }
                    
                    showNotification('Success!', `Features template "${template.nickname}" loaded successfully!`, 'success');
                } else {
                    showNotification('Error!', result.message, 'error');
                }
            } catch (error) {
                console.error('Error loading features template:', error);
                showNotification('Error!', 'An unexpected error occurred.', 'error');
            }
        }

        // Clear features template selection
        function clearFeaturesTemplateSelection() {
            selectedFeaturesTemplateId = null;
            document.getElementById('featuresTemplateNickname').value = '';
            
            // Clear all form fields
            document.getElementById('featuresTitle').value = '';
            document.getElementById('featuresSubtitle').value = '';
            document.getElementById('feature1Title').value = '';
            document.getElementById('feature1Subtitle').value = '';
            document.getElementById('feature1Description').value = '';
            document.getElementById('feature1Icon').value = '';
            document.getElementById('feature1Link').value = '';
            document.getElementById('feature2Title').value = '';
            document.getElementById('feature2Subtitle').value = '';
            document.getElementById('feature2Description').value = '';
            document.getElementById('feature2Icon').value = '';
            document.getElementById('feature2Link').value = '';
            document.getElementById('feature3Title').value = '';
            document.getElementById('feature3Subtitle').value = '';
            document.getElementById('feature3Description').value = '';
            document.getElementById('feature3Icon').value = '';
            document.getElementById('feature3Link').value = '';
            
            // Clear icon previews
            updateIconPreview('feature1Icon', '');
            updateIconPreview('feature2Icon', '');
            updateIconPreview('feature3Icon', '');
            
            // Hide delete button when clearing selection
            document.getElementById('deleteFeaturesBtn').style.display = 'none';
            
            // Don't close dropdown - let user continue typing
        }



        function closeFeaturesDropdownSmoothly() {
            const dropdown = document.getElementById('featuresCustomDropdownMenu');
            const button = document.getElementById('featuresTemplateDropdownBtn');
            const inputField = document.getElementById('featuresTemplateNickname');
            const inputGroup = inputField.closest('.input-group');
            const card = dropdown.closest('.card');
            
            // Smooth close animation
            dropdown.style.opacity = '0';
            dropdown.style.transform = 'translateY(-10px) scale(0.95)';
            
            // Reset button icon
            button.innerHTML = '<i class="fas fa-chevron-down" style="margin: 0 !important; padding: 0 !important; display: block !important;"></i>';
            
            // Remove glow effects
            inputGroup.style.boxShadow = 'none';
            dropdown.style.boxShadow = 'none';
            
            // Reset button styling
            button.style.borderBottomRightRadius = '';
            button.style.borderRight = '';
            
            // Reset input group styling
            inputGroup.style.borderRadius = '';
            
            // Remove expanded class from card
            card.classList.remove('expanded-for-dropdown');
            
            setTimeout(() => {
                dropdown.style.display = 'none';
            }, 300);
        }

        // Delete features template
        async function deleteFeaturesTemplate() {
            if (!selectedFeaturesTemplateId) {
                showNotification('Error!', 'No template selected for deletion.', 'error');
                return;
            }

            if (!confirm('Are you sure you want to delete this template? This action cannot be undone.')) {
                return;
            }

            try {
                const formData = new FormData();
                formData.append('id', selectedFeaturesTemplateId);
                
                // Add anti-forgery token
                const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
                formData.append('__RequestVerificationToken', token);

                const response = await fetch('/Admin/DeleteFeaturesTemplate', {
                    method: 'POST',
                    body: formData
                });

                const result = await response.json();

                if (result.success) {
                    showNotification('Success!', 'Features template deleted successfully!', 'success');
                    
                    // Clear form and reload templates
                    clearFeaturesTemplateSelection();
                    await loadFeaturesTemplates();
                    
                    // Hide delete button
                    document.getElementById('deleteFeaturesBtn').style.display = 'none';
                } else {
                    showNotification('Error!', result.message || 'Failed to delete template.', 'error');
                }
            } catch (error) {
                console.error('Error deleting features template:', error);
                showNotification('Error!', 'An unexpected error occurred while deleting the template.', 'error');
            }
        }

        // Setup Features custom dropdown (exactly like Hero)
        function setupFeaturesDropdown() {
            const dropdownBtn = document.getElementById('featuresTemplateDropdownBtn');
            const dropdownMenu = document.getElementById('featuresCustomDropdownMenu');
            const inputField = document.getElementById('featuresTemplateNickname');
            
            console.log('Setting up Features custom dropdown');
            console.log('Button:', dropdownBtn);
            console.log('Menu:', dropdownMenu);
            console.log('Input:', inputField);
            
            let isOpen = false;
            
            // Button click handler
            dropdownBtn.addEventListener('click', function(e) {
                console.log('Features button clicked!');
                e.preventDefault();
                e.stopPropagation();
                
                if (isOpen) {
                    console.log('Closing Features dropdown');
                    closeFeaturesDropdownSmoothly();
                    isOpen = false;
                } else {
                    console.log('Opening Features dropdown');
                    const card = dropdownMenu.closest('.card');
                    // Reset to initial state first
                    dropdownMenu.style.opacity = '0';
                    dropdownMenu.style.transform = 'translateY(-10px) scale(0.95)';
                    
                    // Show dropdown and expand card
                    dropdownMenu.style.display = 'block';
                    card.classList.add('expanded-for-dropdown');
                    
                    // Remove individual glows from input and button
                    inputField.style.boxShadow = 'none';
                    dropdownBtn.style.boxShadow = 'none';
                    // Remove input field focus border
                    inputField.style.borderColor = 'rgba(129, 140, 248, 0.3)';
                    inputField.style.outline = 'none';
                    
                    // Apply glow to input group (top, left, right only)
                    const inputGroup = inputField.closest('.input-group');
                    inputGroup.style.setProperty(
                      'box-shadow',
                      '-4px 0 8px -4px rgba(129,140,248,0.25), 4px 0 8px -4px rgba(129,140,248,0.25), 0 -4px 8px -4px rgba(129,140,248,0.25)',
                      'important'
                    );
                    inputGroup.style.borderRadius = '4px 4px 0 0';
                    // Remove bottom right radius from dropdown button and adjust border
                    dropdownBtn.style.borderBottomRightRadius = '0';
                    dropdownBtn.style.borderRight = '1px solid rgba(129, 140, 248, 0.3)';
                    
                    // Apply glow to dropdown (bottom, left, right only)
                    dropdownMenu.style.setProperty(
                      'box-shadow',
                      '0 4px 8px -4px rgba(129,140,248,0.25), -4px 0 8px -4px rgba(129,140,248,0.25), 4px 0 8px -4px rgba(129,140,248,0.25)',
                      'important'
                    );
                    dropdownMenu.style.border = '1px solid rgba(129, 140, 248, 0.3)';
                    dropdownMenu.style.borderTop = 'none';
                    dropdownMenu.style.borderRadius = '0 0 4px 4px';
                    // Fix 1-pixel alignment with button
                    dropdownMenu.style.right = '1px';
                    
                    // Force reflow to ensure display: block is applied
                    dropdownMenu.offsetHeight;
                    
                    // Smooth open animation
                    requestAnimationFrame(() => {
                        dropdownMenu.style.opacity = '1';
                        dropdownMenu.style.transform = 'translateY(0) scale(1)';
                    });
                    isOpen = true;
                }
            });
            
            // Input field click handler - allow typing for new templates
            inputField.addEventListener('click', function(e) {
                console.log('Features input clicked!');
                e.preventDefault();
                e.stopPropagation();
                
                // Clear the input to allow typing new nickname
                this.value = '';
                this.focus();
                
                // Hide delete button when creating new template
                document.getElementById('deleteFeaturesBtn').style.display = 'none';
                
                // Clear all form fields
                clearFeaturesTemplateSelection();
            });
            
            // Close dropdown when clicking outside
            document.addEventListener('click', function(e) {
                if (!dropdownBtn.contains(e.target) && !dropdownMenu.contains(e.target) && !inputField.contains(e.target) && isOpen) {
                    closeFeaturesDropdownSmoothly();
                    isOpen = false;
                }
            });
            
            // Close dropdown when pressing Escape
            document.addEventListener('keydown', function(e) {
                if (e.key === 'Escape' && isOpen) {
                    closeFeaturesDropdownSmoothly();
                    isOpen = false;
                }
            });
        }

        // Connect WebSocket when page loads
        document.addEventListener('DOMContentLoaded', function() {
            // Disable WebSocket for admin dashboard since it's served by the same backend
            // The admin dashboard can broadcast messages directly without connecting to itself
            console.log('Admin dashboard: WebSocket disabled - broadcasting directly to connected clients');
            console.log('DOMContentLoaded - checking form state');
            const form = document.getElementById('heroEditForm');
            console.log('Form display on load:', form.style.display);
            console.log('Form computed display on load:', window.getComputedStyle(form).display);
            
            loadTemplates();
            loadFeaturesTemplates();
            updateAllIconPreviews();
            
            // Setup dropdowns after templates are loaded
            setTimeout(() => {
                setupCustomDropdown();
                setupFeaturesDropdown();
            }, 100);
        });
    </script>
}